// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: demo2.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_demo2_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_demo2_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_demo2_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_demo2_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_demo2_2eproto;
namespace person {
class Friends;
class FriendsDefaultTypeInternal;
extern FriendsDefaultTypeInternal _Friends_default_instance_;
class Info;
class InfoDefaultTypeInternal;
extern InfoDefaultTypeInternal _Info_default_instance_;
class Person;
class PersonDefaultTypeInternal;
extern PersonDefaultTypeInternal _Person_default_instance_;
}  // namespace person
PROTOBUF_NAMESPACE_OPEN
template<> ::person::Friends* Arena::CreateMaybeMessage<::person::Friends>(Arena*);
template<> ::person::Info* Arena::CreateMaybeMessage<::person::Info>(Arena*);
template<> ::person::Person* Arena::CreateMaybeMessage<::person::Person>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace person {

enum Sex : int {
  male = 0,
  female = 1,
  unknown = 2,
  Sex_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Sex_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Sex_IsValid(int value);
constexpr Sex Sex_MIN = male;
constexpr Sex Sex_MAX = unknown;
constexpr int Sex_ARRAYSIZE = Sex_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Sex_descriptor();
template<typename T>
inline const std::string& Sex_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Sex>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Sex_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Sex_descriptor(), enum_t_value);
}
inline bool Sex_Parse(
    const std::string& name, Sex* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Sex>(
    Sex_descriptor(), name, value);
}
// ===================================================================

class Info :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:person.Info) */ {
 public:
  Info();
  virtual ~Info();

  Info(const Info& from);
  Info(Info&& from) noexcept
    : Info() {
    *this = ::std::move(from);
  }

  inline Info& operator=(const Info& from) {
    CopyFrom(from);
    return *this;
  }
  inline Info& operator=(Info&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Info& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Info* internal_default_instance() {
    return reinterpret_cast<const Info*>(
               &_Info_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Info& a, Info& b) {
    a.Swap(&b);
  }
  inline void Swap(Info* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Info* New() const final {
    return CreateMaybeMessage<Info>(nullptr);
  }

  Info* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Info>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Info& from);
  void MergeFrom(const Info& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Info* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "person.Info";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_demo2_2eproto);
    return ::descriptor_table_demo2_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kEmailFieldNumber = 3,
    kPhoneFieldNumber = 4,
    kAgeFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string email = 3;
  void clear_email();
  const std::string& email() const;
  void set_email(const std::string& value);
  void set_email(std::string&& value);
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  std::string* mutable_email();
  std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // string phone = 4;
  void clear_phone();
  const std::string& phone() const;
  void set_phone(const std::string& value);
  void set_phone(std::string&& value);
  void set_phone(const char* value);
  void set_phone(const char* value, size_t size);
  std::string* mutable_phone();
  std::string* release_phone();
  void set_allocated_phone(std::string* phone);
  private:
  const std::string& _internal_phone() const;
  void _internal_set_phone(const std::string& value);
  std::string* _internal_mutable_phone();
  public:

  // uint32 age = 2;
  void clear_age();
  ::PROTOBUF_NAMESPACE_ID::uint32 age() const;
  void set_age(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:person.Info)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr phone_;
  ::PROTOBUF_NAMESPACE_ID::uint32 age_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_demo2_2eproto;
};
// -------------------------------------------------------------------

class Friends :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:person.Friends) */ {
 public:
  Friends();
  virtual ~Friends();

  Friends(const Friends& from);
  Friends(Friends&& from) noexcept
    : Friends() {
    *this = ::std::move(from);
  }

  inline Friends& operator=(const Friends& from) {
    CopyFrom(from);
    return *this;
  }
  inline Friends& operator=(Friends&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Friends& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Friends* internal_default_instance() {
    return reinterpret_cast<const Friends*>(
               &_Friends_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Friends& a, Friends& b) {
    a.Swap(&b);
  }
  inline void Swap(Friends* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Friends* New() const final {
    return CreateMaybeMessage<Friends>(nullptr);
  }

  Friends* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Friends>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Friends& from);
  void MergeFrom(const Friends& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Friends* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "person.Friends";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_demo2_2eproto);
    return ::descriptor_table_demo2_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kAgeFieldNumber = 2,
    kSexFieldNumber = 3,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint32 age = 2;
  void clear_age();
  ::PROTOBUF_NAMESPACE_ID::uint32 age() const;
  void set_age(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // .person.Sex sex = 3;
  void clear_sex();
  ::person::Sex sex() const;
  void set_sex(::person::Sex value);

  // @@protoc_insertion_point(class_scope:person.Friends)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 age_;
  int sex_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_demo2_2eproto;
};
// -------------------------------------------------------------------

class Person :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:person.Person) */ {
 public:
  Person();
  virtual ~Person();

  Person(const Person& from);
  Person(Person&& from) noexcept
    : Person() {
    *this = ::std::move(from);
  }

  inline Person& operator=(const Person& from) {
    CopyFrom(from);
    return *this;
  }
  inline Person& operator=(Person&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Person& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Person* internal_default_instance() {
    return reinterpret_cast<const Person*>(
               &_Person_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Person& a, Person& b) {
    a.Swap(&b);
  }
  inline void Swap(Person* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Person* New() const final {
    return CreateMaybeMessage<Person>(nullptr);
  }

  Person* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Person>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Person& from);
  void MergeFrom(const Person& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Person* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "person.Person";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_demo2_2eproto);
    return ::descriptor_table_demo2_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOtherInfoFieldNumber = 4,
    kFriendsFieldNumber = 5,
    kIdFieldNumber = 1,
    kInfoFieldNumber = 3,
    kSexFieldNumber = 2,
  };
  // repeated string other_info = 4;
  int other_info_size() const;
  void clear_other_info();
  const std::string& other_info(int index) const;
  std::string* mutable_other_info(int index);
  void set_other_info(int index, const std::string& value);
  void set_other_info(int index, std::string&& value);
  void set_other_info(int index, const char* value);
  void set_other_info(int index, const char* value, size_t size);
  std::string* add_other_info();
  void add_other_info(const std::string& value);
  void add_other_info(std::string&& value);
  void add_other_info(const char* value);
  void add_other_info(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& other_info() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_other_info();
  private:
  std::string* _internal_add_other_info();
  public:

  // repeated .person.Friends friends = 5;
  int friends_size() const;
  void clear_friends();
  ::person::Friends* mutable_friends(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::person::Friends >*
      mutable_friends();
  const ::person::Friends& friends(int index) const;
  ::person::Friends* add_friends();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::person::Friends >&
      friends() const;

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // .person.Info info = 3;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::person::Info& info() const;
  ::person::Info* release_info();
  ::person::Info* mutable_info();
  void set_allocated_info(::person::Info* info);

  // .person.Sex sex = 2;
  void clear_sex();
  ::person::Sex sex() const;
  void set_sex(::person::Sex value);

  // @@protoc_insertion_point(class_scope:person.Person)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> other_info_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::person::Friends > friends_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::person::Info* info_;
  int sex_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_demo2_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Info

// string name = 1;
inline void Info::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Info::name() const {
  // @@protoc_insertion_point(field_get:person.Info.name)
  return _internal_name();
}
inline void Info::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:person.Info.name)
}
inline std::string* Info::mutable_name() {
  // @@protoc_insertion_point(field_mutable:person.Info.name)
  return _internal_mutable_name();
}
inline const std::string& Info::_internal_name() const {
  return name_.GetNoArena();
}
inline void Info::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Info::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:person.Info.name)
}
inline void Info::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:person.Info.name)
}
inline void Info::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:person.Info.name)
}
inline std::string* Info::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Info::release_name() {
  // @@protoc_insertion_point(field_release:person.Info.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Info::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:person.Info.name)
}

// uint32 age = 2;
inline void Info::clear_age() {
  age_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Info::age() const {
  // @@protoc_insertion_point(field_get:person.Info.age)
  return age_;
}
inline void Info::set_age(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  age_ = value;
  // @@protoc_insertion_point(field_set:person.Info.age)
}

// string email = 3;
inline void Info::clear_email() {
  email_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Info::email() const {
  // @@protoc_insertion_point(field_get:person.Info.email)
  return _internal_email();
}
inline void Info::set_email(const std::string& value) {
  _internal_set_email(value);
  // @@protoc_insertion_point(field_set:person.Info.email)
}
inline std::string* Info::mutable_email() {
  // @@protoc_insertion_point(field_mutable:person.Info.email)
  return _internal_mutable_email();
}
inline const std::string& Info::_internal_email() const {
  return email_.GetNoArena();
}
inline void Info::_internal_set_email(const std::string& value) {
  
  email_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Info::set_email(std::string&& value) {
  
  email_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:person.Info.email)
}
inline void Info::set_email(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  email_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:person.Info.email)
}
inline void Info::set_email(const char* value, size_t size) {
  
  email_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:person.Info.email)
}
inline std::string* Info::_internal_mutable_email() {
  
  return email_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Info::release_email() {
  // @@protoc_insertion_point(field_release:person.Info.email)
  
  return email_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Info::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  email_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:person.Info.email)
}

// string phone = 4;
inline void Info::clear_phone() {
  phone_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Info::phone() const {
  // @@protoc_insertion_point(field_get:person.Info.phone)
  return _internal_phone();
}
inline void Info::set_phone(const std::string& value) {
  _internal_set_phone(value);
  // @@protoc_insertion_point(field_set:person.Info.phone)
}
inline std::string* Info::mutable_phone() {
  // @@protoc_insertion_point(field_mutable:person.Info.phone)
  return _internal_mutable_phone();
}
inline const std::string& Info::_internal_phone() const {
  return phone_.GetNoArena();
}
inline void Info::_internal_set_phone(const std::string& value) {
  
  phone_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Info::set_phone(std::string&& value) {
  
  phone_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:person.Info.phone)
}
inline void Info::set_phone(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  phone_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:person.Info.phone)
}
inline void Info::set_phone(const char* value, size_t size) {
  
  phone_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:person.Info.phone)
}
inline std::string* Info::_internal_mutable_phone() {
  
  return phone_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Info::release_phone() {
  // @@protoc_insertion_point(field_release:person.Info.phone)
  
  return phone_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Info::set_allocated_phone(std::string* phone) {
  if (phone != nullptr) {
    
  } else {
    
  }
  phone_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), phone);
  // @@protoc_insertion_point(field_set_allocated:person.Info.phone)
}

// -------------------------------------------------------------------

// Friends

// string name = 1;
inline void Friends::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Friends::name() const {
  // @@protoc_insertion_point(field_get:person.Friends.name)
  return _internal_name();
}
inline void Friends::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:person.Friends.name)
}
inline std::string* Friends::mutable_name() {
  // @@protoc_insertion_point(field_mutable:person.Friends.name)
  return _internal_mutable_name();
}
inline const std::string& Friends::_internal_name() const {
  return name_.GetNoArena();
}
inline void Friends::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Friends::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:person.Friends.name)
}
inline void Friends::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:person.Friends.name)
}
inline void Friends::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:person.Friends.name)
}
inline std::string* Friends::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Friends::release_name() {
  // @@protoc_insertion_point(field_release:person.Friends.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Friends::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:person.Friends.name)
}

// uint32 age = 2;
inline void Friends::clear_age() {
  age_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Friends::age() const {
  // @@protoc_insertion_point(field_get:person.Friends.age)
  return age_;
}
inline void Friends::set_age(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  age_ = value;
  // @@protoc_insertion_point(field_set:person.Friends.age)
}

// .person.Sex sex = 3;
inline void Friends::clear_sex() {
  sex_ = 0;
}
inline ::person::Sex Friends::sex() const {
  // @@protoc_insertion_point(field_get:person.Friends.sex)
  return static_cast< ::person::Sex >(sex_);
}
inline void Friends::set_sex(::person::Sex value) {
  
  sex_ = value;
  // @@protoc_insertion_point(field_set:person.Friends.sex)
}

// -------------------------------------------------------------------

// Person

// string id = 1;
inline void Person::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Person::id() const {
  // @@protoc_insertion_point(field_get:person.Person.id)
  return _internal_id();
}
inline void Person::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:person.Person.id)
}
inline std::string* Person::mutable_id() {
  // @@protoc_insertion_point(field_mutable:person.Person.id)
  return _internal_mutable_id();
}
inline const std::string& Person::_internal_id() const {
  return id_.GetNoArena();
}
inline void Person::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Person::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:person.Person.id)
}
inline void Person::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:person.Person.id)
}
inline void Person::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:person.Person.id)
}
inline std::string* Person::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Person::release_id() {
  // @@protoc_insertion_point(field_release:person.Person.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Person::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:person.Person.id)
}

// .person.Sex sex = 2;
inline void Person::clear_sex() {
  sex_ = 0;
}
inline ::person::Sex Person::sex() const {
  // @@protoc_insertion_point(field_get:person.Person.sex)
  return static_cast< ::person::Sex >(sex_);
}
inline void Person::set_sex(::person::Sex value) {
  
  sex_ = value;
  // @@protoc_insertion_point(field_set:person.Person.sex)
}

// .person.Info info = 3;
inline bool Person::has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline void Person::clear_info() {
  if (GetArenaNoVirtual() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::person::Info& Person::info() const {
  const ::person::Info* p = info_;
  // @@protoc_insertion_point(field_get:person.Person.info)
  return p != nullptr ? *p : *reinterpret_cast<const ::person::Info*>(
      &::person::_Info_default_instance_);
}
inline ::person::Info* Person::release_info() {
  // @@protoc_insertion_point(field_release:person.Person.info)
  
  ::person::Info* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::person::Info* Person::mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::person::Info>(GetArenaNoVirtual());
    info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:person.Person.info)
  return info_;
}
inline void Person::set_allocated_info(::person::Info* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:person.Person.info)
}

// repeated string other_info = 4;
inline int Person::other_info_size() const {
  return other_info_.size();
}
inline void Person::clear_other_info() {
  other_info_.Clear();
}
inline std::string* Person::add_other_info() {
  // @@protoc_insertion_point(field_add_mutable:person.Person.other_info)
  return _internal_add_other_info();
}
inline const std::string& Person::other_info(int index) const {
  // @@protoc_insertion_point(field_get:person.Person.other_info)
  return other_info_.Get(index);
}
inline std::string* Person::mutable_other_info(int index) {
  // @@protoc_insertion_point(field_mutable:person.Person.other_info)
  return other_info_.Mutable(index);
}
inline void Person::set_other_info(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:person.Person.other_info)
  other_info_.Mutable(index)->assign(value);
}
inline void Person::set_other_info(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:person.Person.other_info)
  other_info_.Mutable(index)->assign(std::move(value));
}
inline void Person::set_other_info(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  other_info_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:person.Person.other_info)
}
inline void Person::set_other_info(int index, const char* value, size_t size) {
  other_info_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:person.Person.other_info)
}
inline std::string* Person::_internal_add_other_info() {
  return other_info_.Add();
}
inline void Person::add_other_info(const std::string& value) {
  other_info_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:person.Person.other_info)
}
inline void Person::add_other_info(std::string&& value) {
  other_info_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:person.Person.other_info)
}
inline void Person::add_other_info(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  other_info_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:person.Person.other_info)
}
inline void Person::add_other_info(const char* value, size_t size) {
  other_info_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:person.Person.other_info)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Person::other_info() const {
  // @@protoc_insertion_point(field_list:person.Person.other_info)
  return other_info_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Person::mutable_other_info() {
  // @@protoc_insertion_point(field_mutable_list:person.Person.other_info)
  return &other_info_;
}

// repeated .person.Friends friends = 5;
inline int Person::friends_size() const {
  return friends_.size();
}
inline void Person::clear_friends() {
  friends_.Clear();
}
inline ::person::Friends* Person::mutable_friends(int index) {
  // @@protoc_insertion_point(field_mutable:person.Person.friends)
  return friends_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::person::Friends >*
Person::mutable_friends() {
  // @@protoc_insertion_point(field_mutable_list:person.Person.friends)
  return &friends_;
}
inline const ::person::Friends& Person::friends(int index) const {
  // @@protoc_insertion_point(field_get:person.Person.friends)
  return friends_.Get(index);
}
inline ::person::Friends* Person::add_friends() {
  // @@protoc_insertion_point(field_add:person.Person.friends)
  return friends_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::person::Friends >&
Person::friends() const {
  // @@protoc_insertion_point(field_list:person.Person.friends)
  return friends_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace person

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::person::Sex> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::person::Sex>() {
  return ::person::Sex_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_demo2_2eproto
